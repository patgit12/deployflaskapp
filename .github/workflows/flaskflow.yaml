name: Deploy to EC2

on:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_KEY}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET}}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.0

    - name: Initialize Terraform
      run: terraform init

    - name: Apply Terraform
      run: terraform apply -auto-approve

    # - name: Install jq and tr
    #   run: |
    #     sudo apt-get update -y
    #     sudo apt-get install -y jq

    - name: Debug Terraform output
      run: terraform output -json
      
    - name: Extract EC2 public IP
      id: extract-ip
      run: echo "ip=$(jq -r '.public_ip' <<< $(terraform output -json public_ip))" >> GITHUB_OUTPUT


    # - name: Extract EC2 public IP
    #   id: extract-ip
    #   run: echo "::set-output name=ip::$(jq -r '.public_ip' <<< $(terraform output -json public_ip))"
    
      

    # - name: Extract EC2 public IP
    #   id: extract-ip
    #   run: echo "::set-output name=ip::$(terraform output -json public_ip | jq -r '')"

    # - name: Debug Terraform output
    #   run: terraform output public_ip

#     - name: Wait for EC2 instance to be ready
#       run: |
#         sleep 120
#       continue-on-error: true
#         # timeout=300
#         # elapsed=0
#         # while [ $elapsed -lt $timeout ]; do
#         #   if ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_PRIVATE_KEY }} ${{ secrets.EC2_USERNAME }}@${{ steps.extract-ip.outputs.ip }} 'docker -v'; then
#         #     echo "Docker is installed and running on the EC2 instance."
#         #     break
#         #   fi
#         #   sleep 10
#         #   elapsed=$((elapsed + 10))
#         # done
#         # if [ $elapsed -ge $timeout ]; then
#         #   echo "Timed out waiting for Docker on the EC2 instance."
#         #   exit 1
#         # fi

#     - name: Deploy to EC2
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ steps.extract-ip.outputs.ip }}
#         username: ${{ secrets.EC2_USERNAME }}
#         key: ${{ secrets.EC2_PRIVATE_KEY }}
#         port: ${{ secrets.PORT }}
#         script: |
#           # Run the Docker container
#           sudo docker run -d -p 80:80 --name flaskapp rapidfort/flaskapp
# #